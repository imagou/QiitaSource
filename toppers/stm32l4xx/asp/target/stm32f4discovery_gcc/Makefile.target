#
#		Makefile のターゲット依存部（stm32f4_discovery用）
#

#
#  ボード名，プロセッサ名，開発環境名の定義
#
BOARD = stm32f4discovery_gcc
CHIP  = stm32f4xx
PRC   = arm_m
TOOL  = gcc

#
#  実行環境の定義
#
ifeq ($(DBGENV),)
DBGENV = RAM
endif

#
#  FPUの方式
#
#FPU_USAGE := FPU_NO_PRESERV
#FPU_USAGE := FPU_NO_LAZYSTACKING
FPU_USAGE := FPU_LAZYSTACKING

#
#  最適化したくない場合はtrueに定義
#
#OMIT_OPTIMIZATION = true

#
#  コンパイルオプション
#
INCLUDES := $(INCLUDES) -I$(TARGETDIR)
COPTS := $(COPTS)
LDFLAGS := $(LDFLAGS)

#
#  カーネルに関する定義
#
KERNEL_DIR := $(KERNEL_DIR) $(TARGETDIR)
KERNEL_ASMOBJS := $(KERNEL_ASMOBJS)
KERNEL_COBJS := $(KERNEL_COBJS) 

#
#  システムサービスに関する定義
#
SYSSVC_DIR := $(SYSSVC_DIR) $(TARGETDIR)
ifeq ($(DBGENV),RAM)
SYSSVC_COBJS := $(SYSSVC_COBJS) 
else
SYSSVC_COBJS := $(SYSSVC_COBJS) target_inithook.o
endif

#
#  トレースログに関する設定
#
ifeq ($(ENABLE_TRACE),true)
      COPTS := $(COPTS) -DTOPPERS_ENABLE_TRACE
      KERNEL_DIR := $(KERNEL_DIR) $(SRCDIR)/arch/logtrace
      KERNEL_COBJS := $(KERNEL_COBJS) trace_config.o trace_dump.o
endif

#
#  GNU開発環境のターゲットアーキテクチャの定義
#
GCC_TARGET = arm-none-eabi

#
#  シリアルポートの定義
#
COPTS := $(COPTS) -DSIO_PORTID=1

#
#  依存関係の定義
#
kernel_cfg.timestamp: $(TARGETDIR)/target.tf
$(OBJFILE): $(TARGETDIR)/target_check.tf

# 
#  オフセットファイル生成のための定義 
# 
OFFSET_TF := $(TARGETDIR)/target_offset.tf

#
#  チップ依存部のインクルード
#
include $(SRCDIR)/arch/$(PRC)_$(TOOL)/$(CHIP)/Makefile.chip

#
#  フラッシュへの書き込み
#
UNAME_TARGET = Cygwin
OPENOCD_PATH = /cygdrive/c/pleiades/OpenOCD/0.10.0-201510281129-dev/bin/openocd.exe
OPENOCD_SCRIPT_PATH = c:/pleiades/OpenOCD/0.10.0-201510281129-dev/scripts
OPENOCD_SCRIPT  = c:/pleiades/OpenOCD/0.10.0-201510281129-dev/scripts/board/stm32f4discovery.cfg

ifeq ($(UNAME_TARGET), Cygwin)
	GDB = arm-gdb_m0.exe
else
	GDB = $(ARDUINO_BASE_DIR_WIN)\hardware\tools\gcc-arm-none-eabi-4.8.3-2014q1\bin\arm-none-eabi-gdb
endif

run: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	"`cygpath -u "$(OPENOCD_PATH)"`" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)" -c "program ./$(OBJNAME).bin verify 0x08000000 reset exit"
#-c "flash probe 0; flash write_image erase ./$(OBJNAME).axf 0x08000000 reset exit"
else
	"$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)" -c "program ./$(OBJNAME).bin verify 0x4000 reset exit"
endif

ocd: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	cygstart "$(OPENOCD_PATH)" '-s "$(OPENOCD_SCRIPT_PATH)"' '-f "$(OPENOCD_SCRIPT)"'
else
	start /MIN "" "$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)"
endif

db: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/gdb.ini
else
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/gdb.ini
endif

d: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	$(GDB) $(OBJFILE) -x $(TARGETDIR)/gdb_noflash.ini
else

endif

